from collections import deque
goal = '123456780'
def get_neighbors(state):
    neighbors = []
    idx = state.index('0')
    x, y = divmod(idx, 3)
    moves = [(-1, 0), (1, 0), (0, -1), (0, 1)] 
    for dx, dy in moves:
        nx, ny = x + dx, y + dy
        if 0 <= nx < 3 and 0 <= ny < 3:
            nidx = nx * 3 + ny
            s = list(state)
            s[idx], s[nidx] = s[nidx], s[idx]
            neighbors.append(''.join(s))
    return neighbors
def print_board(state):
    for i in range(0, 9, 3):
        print(" ".join(c if c != '0' else ' ' for c in state[i:i+3]))
    print("-" * 6)
def solve(start):
    queue = deque([(start, [])])
    visited = set()
    while queue:
        state, path = queue.popleft()
        if state == goal:
            for step in path + [state]:
                print_board(step)
            return
        if state in visited:
            continue
        visited.add(state)
        for neighbor in get_neighbors(state):
            queue.append((neighbor, path + [state]))
start = '123406758'
solve(start)
